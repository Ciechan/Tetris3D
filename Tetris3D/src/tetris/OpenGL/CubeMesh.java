package tetris.OpenGL;



/**
 * This is a helper static class that contains vertex and faces data
 * for one side of a single cube mesh.
 * Exported from Blender.
 *
 */
public class CubeMesh {

	static final VertexData[] VERTICES={
		new VertexData(0.494222f, 0.403035f, -0.403035f, 0.978179f, 0.146825f, -0.146825f, 0.893347f, 0.105908f),
		new VertexData(0.485677f, 0.440267f, -0.402181f, 0.914212f, 0.375561f, -0.152074f, 0.929624f, 0.105832f),
		new VertexData(0.488281f, 0.441406f, -0.359375f, 0.926664f, 0.374401f, -0.033174f, 0.931637f, 0.146921f),
		new VertexData(0.497070f, 0.403320f, -0.359375f, 0.988739f, 0.145909f, -0.032777f, 0.893838f, 0.147704f),
		new VertexData(0.468628f, 0.468628f, -0.401611f, 0.698325f, 0.698325f, -0.156896f, 0.961423f, 0.103922f),
		new VertexData(0.470703f, 0.470703f, -0.359375f, 0.706687f, 0.706687f, -0.034089f, 0.965048f, 0.145588f),
		new VertexData(0.500000f, 0.359375f, -0.359375f, 0.998901f, 0.033113f, -0.033113f, 0.851272f, 0.148014f),
		new VertexData(0.497070f, 0.359375f, -0.403320f, 0.988739f, 0.032777f, -0.145909f, 0.851552f, 0.105455f),
		new VertexData(0.488281f, 0.359375f, -0.441406f, 0.926664f, 0.033174f, -0.374401f, 0.852301f, 0.067667f),
		new VertexData(0.485677f, 0.402181f, -0.440267f, 0.914212f, 0.152074f, -0.375561f, 0.893386f, 0.069636f),
		new VertexData(0.470703f, 0.359375f, -0.470703f, 0.706687f, 0.034089f, -0.706687f, 0.853601f, 0.034267f),
		new VertexData(0.468628f, 0.401611f, -0.468628f, 0.698325f, 0.156896f, -0.698325f, 0.895259f, 0.037841f),
		new VertexData(0.477865f, 0.436849f, -0.436849f, 0.850612f, 0.371746f, -0.371746f, 0.927238f, 0.071982f),
		new VertexData(0.462402f, 0.462402f, -0.434570f, 0.657735f, 0.657735f, -0.367046f, 0.956122f, 0.070667f),
		new VertexData(0.462402f, 0.434570f, -0.462402f, 0.657735f, 0.367046f, -0.657735f, 0.928516f, 0.043098f),
		new VertexData(0.453993f, 0.453993f, -0.453993f, 0.577349f, 0.577349f, -0.577349f, 0.950880f, 0.048309f),
		new VertexData(0.494222f, -0.403035f, 0.403035f, 0.978179f, -0.146825f, 0.146825f, 0.106652f, 0.893046f),
		new VertexData(0.497070f, -0.359375f, 0.403320f, 0.988739f, -0.032777f, 0.145909f, 0.148448f, 0.893499f),
		new VertexData(0.488281f, -0.359375f, 0.441406f, 0.926664f, -0.033174f, 0.374401f, 0.147698f, 0.931288f),
		new VertexData(0.485677f, -0.402181f, 0.440267f, 0.914212f, -0.152074f, 0.375561f, 0.106613f, 0.929320f),
		new VertexData(0.470703f, -0.359375f, 0.470703f, 0.706687f, -0.034089f, 0.706687f, 0.146398f, 0.964688f),
		new VertexData(0.468628f, -0.401611f, 0.468628f, 0.698325f, -0.156896f, 0.698325f, 0.104740f, 0.961115f),
		new VertexData(0.477865f, -0.436849f, 0.436849f, 0.850612f, -0.371746f, 0.371746f, 0.072760f, 0.926974f),
		new VertexData(0.485677f, -0.440267f, 0.402181f, 0.914212f, -0.375561f, 0.152074f, 0.070374f, 0.893123f),
		new VertexData(0.462402f, -0.462402f, 0.434570f, 0.781976f, -0.508713f, 0.360118f, 0.043875f, 0.928289f),
		new VertexData(0.468628f, -0.468628f, 0.401611f, 0.698325f, -0.698325f, 0.156896f, 0.038574f, 0.895033f),
		new VertexData(0.462402f, -0.434570f, 0.462402f, 0.657735f, -0.367046f, 0.657735f, 0.071482f, 0.955858f),
		new VertexData(0.453993f, -0.453993f, 0.453993f, 0.577349f, -0.577349f, 0.577349f, 0.049118f, 0.950648f),
		new VertexData(0.488281f, -0.441406f, 0.359375f, 0.926664f, -0.374401f, 0.033174f, 0.068361f, 0.852033f),
		new VertexData(0.497070f, -0.403320f, 0.359375f, 0.988739f, -0.145909f, 0.032777f, 0.106160f, 0.851251f),
		new VertexData(0.470703f, -0.470703f, 0.359375f, 0.706687f, -0.706687f, 0.034089f, 0.034949f, 0.853367f),
		new VertexData(0.500000f, -0.359375f, 0.359375f, 0.998901f, -0.033113f, 0.033113f, 0.148727f, 0.850940f),
		new VertexData(0.494222f, -0.403035f, -0.403035f, 0.978179f, -0.146825f, -0.146825f, 0.106328f, 0.105945f),
		new VertexData(0.497070f, -0.359375f, -0.403320f, 0.988739f, -0.032777f, -0.145909f, 0.148193f, 0.105528f),
		new VertexData(0.500000f, -0.359375f, -0.359375f, 0.998901f, -0.033113f, -0.033113f, 0.148474f, 0.148148f),
		new VertexData(0.497070f, -0.403320f, -0.359375f, 0.988739f, -0.145909f, -0.032777f, 0.105808f, 0.147814f),
		new VertexData(0.488281f, -0.441406f, -0.359375f, 0.926664f, -0.374401f, -0.033174f, 0.067910f, 0.146993f),
		new VertexData(0.485677f, -0.440267f, -0.402181f, 0.914212f, -0.375561f, -0.152074f, 0.069980f, 0.105820f),
		new VertexData(0.470703f, -0.470703f, -0.359375f, 0.706687f, -0.706687f, -0.034089f, 0.034397f, 0.145606f),
		new VertexData(0.468628f, -0.468628f, -0.401611f, 0.698325f, -0.698325f, -0.156896f, 0.038113f, 0.103848f),
		new VertexData(0.477865f, -0.436849f, -0.436849f, 0.850612f, -0.371746f, -0.371746f, 0.072423f, 0.071920f),
		new VertexData(0.485677f, -0.402181f, -0.440267f, 0.914212f, -0.152074f, -0.375561f, 0.106324f, 0.069624f),
		new VertexData(0.462402f, -0.434570f, -0.462402f, 0.781976f, -0.360118f, -0.508713f, 0.071193f, 0.043002f),
		new VertexData(0.468628f, -0.401611f, -0.468628f, 0.698325f, -0.156896f, -0.698325f, 0.104488f, 0.037799f),
		new VertexData(0.462402f, -0.462402f, -0.434570f, 0.657735f, -0.657735f, -0.367046f, 0.043495f, 0.070545f),
		new VertexData(0.453993f, -0.453993f, -0.453993f, 0.577349f, -0.577349f, -0.577349f, 0.048793f, 0.048170f),
		new VertexData(0.488281f, -0.359375f, -0.441406f, 0.926664f, -0.033174f, -0.374401f, 0.147455f, 0.067699f),
		new VertexData(0.470703f, -0.359375f, -0.470703f, 0.706687f, -0.034089f, -0.706687f, 0.146172f, 0.034276f),
		new VertexData(0.494222f, 0.403035f, 0.403035f, 0.978179f, 0.146825f, 0.146825f, 0.893673f, 0.893008f),
		new VertexData(0.485677f, 0.440267f, 0.402181f, 0.914212f, 0.375561f, 0.152074f, 0.930021f, 0.893132f),
		new VertexData(0.477865f, 0.436849f, 0.436849f, 0.850612f, 0.371746f, 0.371746f, 0.927579f, 0.927032f),
		new VertexData(0.485677f, 0.402181f, 0.440267f, 0.914212f, 0.152074f, 0.375561f, 0.893677f, 0.929328f),
		new VertexData(0.462402f, 0.434570f, 0.462402f, 0.781976f, 0.360118f, 0.508713f, 0.928809f, 0.955951f),
		new VertexData(0.468628f, 0.401611f, 0.468628f, 0.698325f, 0.156896f, 0.698325f, 0.895514f, 0.961153f),
		new VertexData(0.468628f, 0.468628f, 0.401611f, 0.698325f, 0.698325f, 0.156896f, 0.961889f, 0.895103f),
		new VertexData(0.462402f, 0.462402f, 0.434570f, 0.657735f, 0.657735f, 0.367046f, 0.956507f, 0.928406f),
		new VertexData(0.453993f, 0.453993f, 0.453993f, 0.577349f, 0.577349f, 0.577349f, 0.951209f, 0.950782f),
		new VertexData(0.488281f, 0.359375f, 0.441406f, 0.926664f, 0.033174f, 0.374401f, 0.852546f, 0.931254f),
		new VertexData(0.497070f, 0.359375f, 0.403320f, 0.988739f, 0.032777f, 0.145909f, 0.851808f, 0.893425f),
		new VertexData(0.470703f, 0.359375f, 0.470703f, 0.706687f, 0.034089f, 0.706687f, 0.853829f, 0.964678f),
		new VertexData(0.500000f, 0.359375f, 0.359375f, 0.998901f, 0.033113f, 0.033113f, 0.851526f, 0.850804f),
		new VertexData(0.497070f, 0.403320f, 0.359375f, 0.988739f, 0.145909f, 0.032777f, 0.894192f, 0.851138f),
		new VertexData(0.488281f, 0.441406f, 0.359375f, 0.926664f, 0.374401f, 0.033174f, 0.932090f, 0.851959f),
		new VertexData(0.470703f, 0.470703f, 0.359375f, 0.706687f, 0.706687f, 0.034089f, 0.965604f, 0.853344f),
	
		
		// LINE DRAWING VERTICES (super sneaky!)
		new VertexData(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f),
		new VertexData(0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f),
	};
	
	static final byte[] FACES = {
	    /* Cube 98 faces */
	    0, 1, 2, 0, 2, 3, 1, 4, 5, 1, 5, 2, 0, 3, 6, 0, 6, 7, 0, 7, 8, 0, 8, 9, 9, 8, 10,
	    9, 10, 11, 0, 9, 12, 0, 12, 1, 1, 12, 13, 1, 13, 4, 9, 11, 14, 9, 14, 12, 12, 14,
	    15, 12, 15, 13, 16, 17, 18, 16, 18, 19, 19, 18, 20, 19, 20, 21, 16, 19, 22, 16, 
	    22, 23, 23, 22, 24, 23, 24, 25, 19, 21, 26, 19, 26, 22, 22, 26, 27, 22, 27, 24,
	    16, 23, 28, 16, 28, 29, 23, 25, 30, 23, 30, 28, 16, 29, 31, 16, 31, 17, 32, 33,
	    34, 32, 34, 35, 32, 35, 36, 32, 36, 37, 37, 36, 38, 37, 38, 39, 32, 37, 40, 32,
	    40, 41, 41, 40, 42, 41, 42, 43, 37, 39, 44, 37, 44, 40, 40, 44, 45, 40, 45, 42,
	    32, 41, 46, 32, 46, 33, 41, 43, 47, 41, 47, 46, 48, 49, 50, 48, 50, 51, 51, 50,
	    52, 51, 52, 53, 49, 54, 55, 49, 55, 50, 50, 55, 56, 50, 56, 52, 48, 51, 57, 48, 
	    57, 58, 51, 53, 59, 51, 59, 57, 48, 58, 60, 48, 60, 61, 48, 61, 62, 48, 62, 49, 
	    49, 62, 63, 49, 63, 54, 18, 57, 59, 18, 59, 20, 17, 58, 57, 17, 57, 18, 58, 17, 
	    31, 58, 31, 60, 62, 2, 5, 62, 5, 63, 61, 3, 2, 61, 2, 62, 3, 61, 60, 3, 60, 6, 
	    36, 28, 30, 36, 30, 38, 35, 29, 28, 35, 28, 36, 29, 35, 34, 29, 34, 31, 8, 46, 
	    47, 8, 47, 10, 7, 33, 46, 7, 46, 8, 33, 7, 6, 33, 6, 34, 31, 34, 6, 31, 6, 60,
	};
}
